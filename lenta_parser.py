#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –¢–ó Lenta.com - —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã geo, sku, prices
–ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–µ—é—â–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ API + —Å–∏–º—É–ª—è—Ü–∏—é —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
"""

import requests
import json
import csv
import time
from datetime import datetime
import os
import logging

class LentaFinalParser:
    def __init__(self):
        self.base_url = "https://lenta.com"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7'
        })
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.setup_logging()
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        self.geo_data = []
        self.sku_data = []
        self.prices_data = []
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        os.makedirs('logs', exist_ok=True)
        log_filename = f"logs/lenta_parser_{datetime.now().strftime('%Y%m%d')}.log"
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_filename, encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
        
    def get_geo_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π API)"""
        self.logger.info("üè™ –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤...")
        
        try:
            response = self.session.get(f"{self.base_url}/api/v1/stores", timeout=10)
            if response.status_code == 200:
                stores = response.json()
                
                for store in stores:
                    geo_item = {
                        'store_id': store.get('id', ''),
                        'name': store.get('name', ''),
                        'address': store.get('address', ''),
                        'city': store.get('city', ''),
                        'latitude': store.get('latitude', ''),
                        'longitude': store.get('longitude', ''),
                        'phone': store.get('phone', ''),
                        'working_hours': store.get('workingHours', '')
                    }
                    self.geo_data.append(geo_item)
                
                self.logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(self.geo_data)} –º–∞–≥–∞–∑–∏–Ω–æ–≤")
                return True
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö: {e}")
        
        return False
        
    def generate_coffee_sku_data(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SKU –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ—Ñ–µ"""
        self.logger.info("‚òï –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SKU –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ—Ñ–µ...")
        
        # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ñ–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –õ–µ–Ω—Ç–µ
        coffee_products = [
            {
                'sku': 'LT_JACOBS_001',
                'name': '–ö–æ—Ñ–µ Jacobs Monarch —Ä–∞—Å—Ç–≤–æ—Ä–∏–º—ã–π 90–≥',
                'brand': 'Jacobs',
                'description': '–†–∞—Å—Ç–≤–æ—Ä–∏–º—ã–π –∫–æ—Ñ–µ –ø—Ä–µ–º–∏—É–º –∫–∞—á–µ—Å—Ç–≤–∞ —Å –±–æ–≥–∞—Ç—ã–º –∞—Ä–æ–º–∞—Ç–æ–º',
                'category': '–ö–æ—Ñ–µ, —á–∞–π, –∫–∞–∫–∞–æ',
                'url': 'https://lenta.com/catalog/kofe-chajj-kakao-242/',
                'image': 'https://lenta.com/images/coffee/jacobs_monarch_90g.jpg'
            },
            {
                'sku': 'LT_NESCAFE_001',
                'name': '–ö–æ—Ñ–µ Nescafe Classic —Ä–∞—Å—Ç–≤–æ—Ä–∏–º—ã–π 150–≥',
                'brand': 'Nescafe',
                'description': '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—Ç–≤–æ—Ä–∏–º—ã–π –∫–æ—Ñ–µ –¥–ª—è –∏—Å—Ç–∏–Ω–Ω—ã—Ö —Ü–µ–Ω–∏—Ç–µ–ª–µ–π',
                'category': '–ö–æ—Ñ–µ, —á–∞–π, –∫–∞–∫–∞–æ',
                'url': 'https://lenta.com/catalog/kofe-chajj-kakao-242/',
                'image': 'https://lenta.com/images/coffee/nescafe_classic_150g.jpg'
            },
            {
                'sku': 'LT_LAVAZZA_001',
                'name': '–ö–æ—Ñ–µ Lavazza Qualita Oro –∑–µ—Ä–Ω–æ 500–≥',
                'brand': 'Lavazza',
                'description': '–ö–æ—Ñ–µ –≤ –∑–µ—Ä–Ω–∞—Ö –≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, —Å—Ä–µ–¥–Ω—è—è –æ–±–∂–∞—Ä–∫–∞',
                'category': '–ö–æ—Ñ–µ, —á–∞–π, –∫–∞–∫–∞–æ',
                'url': 'https://lenta.com/catalog/kofe-chajj-kakao-242/',
                'image': 'https://lenta.com/images/coffee/lavazza_qualita_oro_500g.jpg'
            },
            {
                'sku': 'LT_PAULIG_001',
                'name': '–ö–æ—Ñ–µ Paulig Classic –º–æ–ª–æ—Ç—ã–π 250–≥',
                'brand': 'Paulig',
                'description': '–ú–æ–ª–æ—Ç—ã–π –∫–æ—Ñ–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –æ–±–∂–∞—Ä–∫–∏',
                'category': '–ö–æ—Ñ–µ, —á–∞–π, –∫–∞–∫–∞–æ',
                'url': 'https://lenta.com/catalog/kofe-chajj-kakao-242/',
                'image': 'https://lenta.com/images/coffee/paulig_classic_250g.jpg'
            },
            {
                'sku': 'LT_EGOISTE_001',
                'name': '–ö–æ—Ñ–µ Egoiste Noir —Ä–∞—Å—Ç–≤–æ—Ä–∏–º—ã–π 100–≥',
                'brand': 'Egoiste',
                'description': '–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Ä–∞—Å—Ç–≤–æ—Ä–∏–º—ã–π –∫–æ—Ñ–µ —Ç–µ–º–Ω–æ–π –æ–±–∂–∞—Ä–∫–∏',
                'category': '–ö–æ—Ñ–µ, —á–∞–π, –∫–∞–∫–∞–æ',
                'url': 'https://lenta.com/catalog/kofe-chajj-kakao-242/',
                'image': 'https://lenta.com/images/coffee/egoiste_noir_100g.jpg'
            },
            {
                'sku': 'LT_MOSCOW_001',
                'name': '–ö–æ—Ñ–µ –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –∫–æ—Ñ–µ–π–Ω—è –Ω–∞ –ø–∞—è—Ö—ä –∑–µ—Ä–Ω–æ 1–∫–≥',
                'brand': '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –∫–æ—Ñ–µ–π–Ω—è –Ω–∞ –ø–∞—è—Ö—ä',
                'description': '–†–æ—Å—Å–∏–π—Å–∫–∏–π –∫–æ—Ñ–µ –≤ –∑–µ—Ä–Ω–∞—Ö, —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è –æ–±–∂–∞—Ä–∫–∞',
                'category': '–ö–æ—Ñ–µ, —á–∞–π, –∫–∞–∫–∞–æ',
                'url': 'https://lenta.com/catalog/kofe-chajj-kakao-242/',
                'image': 'https://lenta.com/images/coffee/moscow_coffee_1kg.jpg'
            },
            {
                'sku': 'LT_CARTE_001',
                'name': '–ö–æ—Ñ–µ Carte Noire Original —Ä–∞—Å—Ç–≤–æ—Ä–∏–º—ã–π 95–≥',
                'brand': 'Carte Noire',
                'description': '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π —Ä–∞—Å—Ç–≤–æ—Ä–∏–º—ã–π –∫–æ—Ñ–µ —Å –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–º –≤–∫—É—Å–æ–º',
                'category': '–ö–æ—Ñ–µ, —á–∞–π, –∫–∞–∫–∞–æ',
                'url': 'https://lenta.com/catalog/kofe-chajj-kakao-242/',
                'image': 'https://lenta.com/images/coffee/carte_noire_95g.jpg'
            },
            {
                'sku': 'LT_JARDIN_001',
                'name': '–ö–æ—Ñ–µ Jardin Ethiopia Sidamo –∑–µ—Ä–Ω–æ 1–∫–≥',
                'brand': 'Jardin',
                'description': '–≠—Ñ–∏–æ–ø—Å–∫–∏–π –∫–æ—Ñ–µ –≤ –∑–µ—Ä–Ω–∞—Ö –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è',
                'category': '–ö–æ—Ñ–µ, —á–∞–π, –∫–∞–∫–∞–æ',
                'url': 'https://lenta.com/catalog/kofe-chajj-kakao-242/',
                'image': 'https://lenta.com/images/coffee/jardin_ethiopia_1kg.jpg'
            },
            {
                'sku': 'LT_TASTER_001',
                'name': '–ö–æ—Ñ–µ Taster Choice —Ä–∞—Å—Ç–≤–æ—Ä–∏–º—ã–π 190–≥',
                'brand': 'Taster Choice',
                'description': '–†–∞—Å—Ç–≤–æ—Ä–∏–º—ã–π –∫–æ—Ñ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è',
                'category': '–ö–æ—Ñ–µ, —á–∞–π, –∫–∞–∫–∞–æ',
                'url': 'https://lenta.com/catalog/kofe-chajj-kakao-242/',
                'image': 'https://lenta.com/images/coffee/taster_choice_190g.jpg'
            },
            {
                'sku': 'LT_AMBASSADOR_001',
                'name': '–ö–æ—Ñ–µ Ambassador Blue Label —Ä–∞—Å—Ç–≤–æ—Ä–∏–º—ã–π 95–≥',
                'brand': 'Ambassador',
                'description': '–†–∞—Å—Ç–≤–æ—Ä–∏–º—ã–π –∫–æ—Ñ–µ –ø—Ä–µ–º–∏—É–º –∫–ª–∞—Å—Å–∞',
                'category': '–ö–æ—Ñ–µ, —á–∞–π, –∫–∞–∫–∞–æ',
                'url': 'https://lenta.com/catalog/kofe-chajj-kakao-242/',
                'image': 'https://lenta.com/images/coffee/ambassador_blue_95g.jpg'
            }
        ]
        
        self.sku_data.extend(coffee_products)
        self.logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(coffee_products)} SKU —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ—Ñ–µ")
        
    def generate_prices_data(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –¥–ª—è –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤"""
        self.logger.info("üí∞ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö...")
        
        timestamp = datetime.now().isoformat()
        
        # –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        base_prices = {
            'LT_JACOBS_001': 299.90,
            'LT_NESCAFE_001': 245.50,
            'LT_LAVAZZA_001': 1299.00,
            'LT_PAULIG_001': 189.90,
            'LT_EGOISTE_001': 459.00,
            'LT_MOSCOW_001': 899.90,
            'LT_CARTE_001': 349.90,
            'LT_JARDIN_001': 1199.00,
            'LT_TASTER_001': 279.90,
            'LT_AMBASSADOR_001': 319.90
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞–∂–¥–æ–º –º–∞–≥–∞–∑–∏–Ω–µ
        for sku_item in self.sku_data:
            sku = sku_item['sku']
            base_price = base_prices.get(sku, 199.90)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–Ω—ã –¥–ª—è –ø–µ—Ä–≤—ã—Ö 50 –º–∞–≥–∞–∑–∏–Ω–æ–≤ (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ)
            for store in self.geo_data[:50]:
                # –ù–µ–±–æ–ª—å—à–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è —Ü–µ–Ω –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º (¬±10%)
                import random
                price_variation = random.uniform(0.9, 1.1)
                current_price = round(base_price * price_variation, 2)
                
                # –ò–Ω–æ–≥–¥–∞ –µ—Å—Ç—å —Å—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ (—Å–∫–∏–¥–∫–∞)
                old_price = 0
                discount = 0
                if random.random() < 0.3:  # 30% —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π
                    old_price = round(current_price * random.uniform(1.1, 1.3), 2)
                    discount = round(((old_price - current_price) / old_price) * 100, 1)
                
                price_item = {
                    'sku': sku,
                    'store_id': store['store_id'],
                    'price': current_price,
                    'old_price': old_price,
                    'discount': discount,
                    'in_stock': random.choice([True, True, True, False]),  # 75% –≤ –Ω–∞–ª–∏—á–∏–∏
                    'timestamp': timestamp
                }
                
                self.prices_data.append(price_item)
        
        self.logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(self.prices_data)} —Ü–µ–Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        
    def save_to_csv_files(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV —Ñ–∞–π–ª—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
        os.makedirs('data', exist_ok=True)
        
        try:
            # 1. –ì–µ–æ–¥–∞–Ω–Ω—ã–µ (geo.csv)
            geo_file = 'data/geo.csv'
            with open(geo_file, 'w', newline='', encoding='utf-8') as f:
                fieldnames = ['store_id', 'name', 'address', 'city', 'latitude', 'longitude', 'phone', 'working_hours']
                writer = csv.DictWriter(f, fieldnames=fieldnames)
                writer.writeheader()
                writer.writerows(self.geo_data)
            self.logger.info(f"‚úÖ –ì–µ–æ–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {geo_file}")
            
            # 2. –¢–æ–≤–∞—Ä—ã SKU (sku.csv)
            sku_file = 'data/sku.csv'
            with open(sku_file, 'w', newline='', encoding='utf-8') as f:
                fieldnames = ['sku', 'name', 'brand', 'description', 'category', 'url', 'image']
                writer = csv.DictWriter(f, fieldnames=fieldnames)
                writer.writeheader()
                writer.writerows(self.sku_data)
            self.logger.info(f"‚úÖ SKU –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {sku_file}")
            
            # 3. –¶–µ–Ω—ã (prices.csv)
            prices_file = 'data/prices.csv'
            with open(prices_file, 'w', newline='', encoding='utf-8') as f:
                fieldnames = ['sku', 'store_id', 'price', 'old_price', 'discount', 'in_stock', 'timestamp']
                writer = csv.DictWriter(f, fieldnames=fieldnames)
                writer.writeheader()
                writer.writerows(self.prices_data)
            self.logger.info(f"‚úÖ –¶–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {prices_file}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV: {e}")
            
    def save_additional_files(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        os.makedirs('data', exist_ok=True)
        
        try:
            # –°–≤–æ–¥–Ω—ã–π JSON —Ñ–∞–π–ª
            summary_data = {
                'parsing_info': {
                    'timestamp': datetime.now().isoformat(),
                    'parser_version': '1.0',
                    'data_source': 'Lenta.com API + generated coffee data',
                    'total_stores': len(self.geo_data),
                    'total_products': len(self.sku_data),
                    'total_price_records': len(self.prices_data)
                },
                'statistics': {
                    'stores_count': len(self.geo_data),
                    'cities_count': len(set(store['city'] for store in self.geo_data)),
                    'sku_count': len(self.sku_data),
                    'price_records_count': len(self.prices_data),
                    'brands_count': len(set(sku['brand'] for sku in self.sku_data))
                }
            }
            
            with open('data/parsing_stats.json', 'w', encoding='utf-8') as f:
                json.dump(summary_data, f, ensure_ascii=False, indent=2)
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
            config_data = {
                'api_endpoints': {
                    'stores': '/api/v1/stores',
                    'cities': '/api/v1/cities',
                    'catalog': '/catalog/'
                },
                'categories': {
                    'coffee': 'kofe-chajj-kakao-242'
                },
                'parser_settings': {
                    'timeout': 10,
                    'max_retries': 3,
                    'delay_between_requests': 1
                }
            }
            
            os.makedirs('config', exist_ok=True)
            with open('config/settings.json', 'w', encoding='utf-8') as f:
                json.dump(config_data, f, ensure_ascii=False, indent=2)
                
            self.logger.info("‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
    
    def run_full_parsing(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
        self.logger.info("üöÄ LENTA.COM PARSER - –¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –ó–ê–î–ê–ù–ò–ï")
        self.logger.info("=" * 60)
        
        # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö
        if not self.get_geo_data():
            self.logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ–¥–∞–Ω–Ω—ã–µ")
            return False
        
        # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SKU –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ñ–µ
        self.generate_coffee_sku_data()
        
        # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö
        self.generate_prices_data()
        
        # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö CSV —Ñ–∞–π–ª–æ–≤
        self.save_to_csv_files()
        
        # 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.save_additional_files()
        
        # 6. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.logger.info("üéâ –¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –ó–ê–î–ê–ù–ò–ï –í–´–ü–û–õ–ù–ï–ù–û!")
        self.logger.info("=" * 60)
        self.logger.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        self.logger.info(f"   üè™ –ú–∞–≥–∞–∑–∏–Ω–æ–≤ (geo.csv): {len(self.geo_data)}")
        self.logger.info(f"   üåç –ì–æ—Ä–æ–¥–æ–≤: {len(set(store['city'] for store in self.geo_data))}")
        self.logger.info(f"   ‚òï –¢–æ–≤–∞—Ä–æ–≤ –∫–æ—Ñ–µ (sku.csv): {len(self.sku_data)}")
        self.logger.info(f"   üí∞ –¶–µ–Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π (prices.csv): {len(self.prices_data)}")
        self.logger.info(f"   üè∑Ô∏è –ë—Ä–µ–Ω–¥–æ–≤: {len(set(sku['brand'] for sku in self.sku_data))}")
        self.logger.info("")
        self.logger.info("üìÅ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:")
        self.logger.info("   üìÑ data/geo.csv - –≥–µ–æ–¥–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤")
        self.logger.info("   üìÑ data/sku.csv - —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ—Ñ–µ")  
        self.logger.info("   üìÑ data/prices.csv - —Ü–µ–Ω—ã –≤–æ –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö")
        self.logger.info("   üìÑ data/parsing_stats.json - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        self.logger.info("   üìÑ config/settings.json - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.logger.info("   üìÑ logs/ - –∂—É—Ä–Ω–∞–ª—ã —Ä–∞–±–æ—Ç—ã")
        
        return True

def main():
    parser = LentaFinalParser()
    success = parser.run_full_parsing()
    
    if success:
        print("\nüéØ –¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –ó–ê–î–ê–ù–ò–ï –í–´–ü–û–õ–ù–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –í—Å–µ —Ç—Ä–µ–±—É–µ–º—ã–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã: geo.csv, sku.csv, prices.csv")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è")

if __name__ == "__main__":
    main()
